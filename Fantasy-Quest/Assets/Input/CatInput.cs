//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/CatInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CatInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CatInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CatInput"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""1316098d-a4e2-419d-a6ea-8189f320aa96"",
            ""actions"": [
                {
                    ""name"": ""HorizontalMove"",
                    ""type"": ""Value"",
                    ""id"": ""174a9463-04ce-4b2e-af6d-6491ab3b75bd"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UpJump"",
                    ""type"": ""Button"",
                    ""id"": ""47e507ab-03c3-48b3-aa7f-6150d8a99096"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownJump"",
                    ""type"": ""Button"",
                    ""id"": ""668cc88b-9ad8-4107-97fe-6063beaf747e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c42ba05d-6b1e-47d8-b843-c744a8acafac"",
                    ""path"": ""1DAxis(whichSideWins=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b60c946d-6bcc-439c-9e6f-5d59079a8c6d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3d14f595-3dd5-4936-b477-e5652658b361"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4c821e44-3c86-4078-8455-b8be5b10af97"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54c88f18-6676-42bd-8fce-0f1c8156d441"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_HorizontalMove = m_Movement.FindAction("HorizontalMove", throwIfNotFound: true);
        m_Movement_UpJump = m_Movement.FindAction("UpJump", throwIfNotFound: true);
        m_Movement_DownJump = m_Movement.FindAction("DownJump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_HorizontalMove;
    private readonly InputAction m_Movement_UpJump;
    private readonly InputAction m_Movement_DownJump;
    public struct MovementActions
    {
        private @CatInput m_Wrapper;
        public MovementActions(@CatInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @HorizontalMove => m_Wrapper.m_Movement_HorizontalMove;
        public InputAction @UpJump => m_Wrapper.m_Movement_UpJump;
        public InputAction @DownJump => m_Wrapper.m_Movement_DownJump;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @HorizontalMove.started += instance.OnHorizontalMove;
            @HorizontalMove.performed += instance.OnHorizontalMove;
            @HorizontalMove.canceled += instance.OnHorizontalMove;
            @UpJump.started += instance.OnUpJump;
            @UpJump.performed += instance.OnUpJump;
            @UpJump.canceled += instance.OnUpJump;
            @DownJump.started += instance.OnDownJump;
            @DownJump.performed += instance.OnDownJump;
            @DownJump.canceled += instance.OnDownJump;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @HorizontalMove.started -= instance.OnHorizontalMove;
            @HorizontalMove.performed -= instance.OnHorizontalMove;
            @HorizontalMove.canceled -= instance.OnHorizontalMove;
            @UpJump.started -= instance.OnUpJump;
            @UpJump.performed -= instance.OnUpJump;
            @UpJump.canceled -= instance.OnUpJump;
            @DownJump.started -= instance.OnDownJump;
            @DownJump.performed -= instance.OnDownJump;
            @DownJump.canceled -= instance.OnDownJump;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);
    public interface IMovementActions
    {
        void OnHorizontalMove(InputAction.CallbackContext context);
        void OnUpJump(InputAction.CallbackContext context);
        void OnDownJump(InputAction.CallbackContext context);
    }
}
