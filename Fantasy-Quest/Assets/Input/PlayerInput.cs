//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""582c234e-c295-4993-804a-593ee64dcd53"",
            ""actions"": [
                {
                    ""name"": ""KeyBoardMove"",
                    ""type"": ""Value"",
                    ""id"": ""741054b7-43a2-4dcc-81ae-6e0a11af8a5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseMove"",
                    ""type"": ""Button"",
                    ""id"": ""5fbba412-a3aa-44e2-8dbe-cd69fa3cda9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePositionForMove"",
                    ""type"": ""Button"",
                    ""id"": ""ef0a96a5-f767-4a4e-bebd-b01357541ac5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CallHumanInteraction"",
                    ""type"": ""Button"",
                    ""id"": ""81a1e6a7-eb4b-4561-8dac-90cc10aa0a8b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CatInteraction"",
                    ""type"": ""Button"",
                    ""id"": ""eddb7b3c-bd37-48cb-92be-3112f52b461a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skip"",
                    ""type"": ""Button"",
                    ""id"": ""ce27d4ed-338c-4a44-9757-81a0e8b1ed6b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""ButtonMove"",
                    ""id"": ""400d6ef8-1632-4f39-89cb-64d591cac544"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyBoardMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1fa9bbdd-4488-44cb-b544-a0f24033ab96"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardAndMouse"",
                    ""action"": ""KeyBoardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a5ab65f5-f077-4a53-b612-e57a0727cc9e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardAndMouse"",
                    ""action"": ""KeyBoardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0a707bc6-66ac-4e40-8b6f-09ca5db16ed7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardAndMouse"",
                    ""action"": ""KeyBoardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""388c0353-0afb-4d7c-95a7-312bade60c72"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardAndMouse"",
                    ""action"": ""KeyBoardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""deafebf7-0180-4cd5-b614-30a3d4a19114"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardAndMouse"",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fedadb9-49ce-4f00-9d33-9dc2d4bdbd4c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardAndMouse"",
                    ""action"": ""MousePositionForMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0ee1b7d-a349-4824-8095-8570376e6dd5"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CallHumanInteraction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""727e9280-d83c-4df4-97c5-a47385b7dfd4"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CatInteraction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac1eef98-fe1b-4a9a-897f-50280b02df29"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardAndMouse"",
                    ""action"": ""Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyBoardAndMouse"",
            ""bindingGroup"": ""KeyBoardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_KeyBoardMove = m_Player.FindAction("KeyBoardMove", throwIfNotFound: true);
        m_Player_MouseMove = m_Player.FindAction("MouseMove", throwIfNotFound: true);
        m_Player_MousePositionForMove = m_Player.FindAction("MousePositionForMove", throwIfNotFound: true);
        m_Player_CallHumanInteraction = m_Player.FindAction("CallHumanInteraction", throwIfNotFound: true);
        m_Player_CatInteraction = m_Player.FindAction("CatInteraction", throwIfNotFound: true);
        m_Player_Skip = m_Player.FindAction("Skip", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_KeyBoardMove;
    private readonly InputAction m_Player_MouseMove;
    private readonly InputAction m_Player_MousePositionForMove;
    private readonly InputAction m_Player_CallHumanInteraction;
    private readonly InputAction m_Player_CatInteraction;
    private readonly InputAction m_Player_Skip;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @KeyBoardMove => m_Wrapper.m_Player_KeyBoardMove;
        public InputAction @MouseMove => m_Wrapper.m_Player_MouseMove;
        public InputAction @MousePositionForMove => m_Wrapper.m_Player_MousePositionForMove;
        public InputAction @CallHumanInteraction => m_Wrapper.m_Player_CallHumanInteraction;
        public InputAction @CatInteraction => m_Wrapper.m_Player_CatInteraction;
        public InputAction @Skip => m_Wrapper.m_Player_Skip;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @KeyBoardMove.started += instance.OnKeyBoardMove;
            @KeyBoardMove.performed += instance.OnKeyBoardMove;
            @KeyBoardMove.canceled += instance.OnKeyBoardMove;
            @MouseMove.started += instance.OnMouseMove;
            @MouseMove.performed += instance.OnMouseMove;
            @MouseMove.canceled += instance.OnMouseMove;
            @MousePositionForMove.started += instance.OnMousePositionForMove;
            @MousePositionForMove.performed += instance.OnMousePositionForMove;
            @MousePositionForMove.canceled += instance.OnMousePositionForMove;
            @CallHumanInteraction.started += instance.OnCallHumanInteraction;
            @CallHumanInteraction.performed += instance.OnCallHumanInteraction;
            @CallHumanInteraction.canceled += instance.OnCallHumanInteraction;
            @CatInteraction.started += instance.OnCatInteraction;
            @CatInteraction.performed += instance.OnCatInteraction;
            @CatInteraction.canceled += instance.OnCatInteraction;
            @Skip.started += instance.OnSkip;
            @Skip.performed += instance.OnSkip;
            @Skip.canceled += instance.OnSkip;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @KeyBoardMove.started -= instance.OnKeyBoardMove;
            @KeyBoardMove.performed -= instance.OnKeyBoardMove;
            @KeyBoardMove.canceled -= instance.OnKeyBoardMove;
            @MouseMove.started -= instance.OnMouseMove;
            @MouseMove.performed -= instance.OnMouseMove;
            @MouseMove.canceled -= instance.OnMouseMove;
            @MousePositionForMove.started -= instance.OnMousePositionForMove;
            @MousePositionForMove.performed -= instance.OnMousePositionForMove;
            @MousePositionForMove.canceled -= instance.OnMousePositionForMove;
            @CallHumanInteraction.started -= instance.OnCallHumanInteraction;
            @CallHumanInteraction.performed -= instance.OnCallHumanInteraction;
            @CallHumanInteraction.canceled -= instance.OnCallHumanInteraction;
            @CatInteraction.started -= instance.OnCatInteraction;
            @CatInteraction.performed -= instance.OnCatInteraction;
            @CatInteraction.canceled -= instance.OnCatInteraction;
            @Skip.started -= instance.OnSkip;
            @Skip.performed -= instance.OnSkip;
            @Skip.canceled -= instance.OnSkip;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_KeyBoardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyBoardAndMouseScheme
    {
        get
        {
            if (m_KeyBoardAndMouseSchemeIndex == -1) m_KeyBoardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyBoardAndMouse");
            return asset.controlSchemes[m_KeyBoardAndMouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnKeyBoardMove(InputAction.CallbackContext context);
        void OnMouseMove(InputAction.CallbackContext context);
        void OnMousePositionForMove(InputAction.CallbackContext context);
        void OnCallHumanInteraction(InputAction.CallbackContext context);
        void OnCatInteraction(InputAction.CallbackContext context);
        void OnSkip(InputAction.CallbackContext context);
    }
}
